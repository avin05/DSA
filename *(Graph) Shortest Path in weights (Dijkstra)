import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;
      int wt;

      Edge(int src, int nbr, int wt) {
         this.src = src;
         this.nbr = nbr;
         this.wt = wt;
      }
   }
   public static class DPair implements Comparable<DPair>{
       int vtx;
       String psf;
       int wsf;
       
       public DPair(int vtx,String psf,int wsf){
           this.vtx = vtx;
           this.psf=psf;
           this.wsf=wsf;
           
       }
       public int compareTo(DPair o){
           return this.wsf-o.wsf;
       }
   }
   
   public static void dijkstra(ArrayList<Edge>[] graph,int src){
       PriorityQueue<DPair> pq = new PriorityQueue<>();
       pq.add(new DPair(src,""+src,0));
       
       boolean[] vis = new boolean[graph.length];
       
       while(pq.size()>0){
           DPair rem = pq.remove();
           
           if(vis[rem.vtx]==true){
               continue;
           }
           
           vis[rem.vtx]=true;
           
           System.out.println(rem.vtx+" via "+rem.psf+" @ "+rem.wsf);
           
           for(Edge e:graph[rem.vtx]){
               int nbr = e.nbr;
               
               if(vis[nbr]==false){
                   pq.add(new DPair(nbr,rem.psf+nbr,rem.wsf+e.wt));
               }
           }
       }
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         int wt = Integer.parseInt(parts[2]);
         graph[v1].add(new Edge(v1, v2, wt));
         graph[v2].add(new Edge(v2, v1, wt));
      }

      int src = Integer.parseInt(br.readLine());
      // write your code here
      
      dijkstra(graph,src);
      
   }
}
