import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }
   public static class BPair{
       int vtx;
       int level;
       
       public BPair(int vtx,int level){
           this.vtx=vtx;
           this.level=level;
       }
   }
   
   public static int spreadInfection(ArrayList<Edge>[] graph,int src,int t){
       Queue<BPair> qu = new LinkedList<>();
       
       int[] vis = new int[graph.length];
       qu.add(new BPair(src,1));
       int count=0;
       
       while(qu.size()>0){
           BPair rem = qu.remove();
           
           if(vis[rem.vtx]!=0){
               continue;
           }
           
           vis[rem.vtx]=rem.level;
           if(rem.level >t){
               break;
           }
           count++;
           
           for(Edge e:graph[rem.vtx]){
               int nbr = e.nbr;
               
               if(vis[nbr]==0){
                   qu.add(new BPair(nbr,rem.level+1));
               }
           }
       }
       
       return count;
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }

      int src = Integer.parseInt(br.readLine());
      int t = Integer.parseInt(br.readLine());
      
      // write your code here
      System.out.println(spreadInfection(graph,src,t));
   }

}

---------------------------------------------------------------------------------------------------------


import java.io.*;
import java.util.*;

public class Main {
   static class Edge {
      int src;
      int nbr;

      Edge(int src, int nbr) {
         this.src = src;
         this.nbr = nbr;
      }
   }
   public static class BPair{
       int vtx;
       int level;
       
       public BPair(int vtx,int level){
           this.vtx=vtx;
           this.level=level;
       }
   }
   
   public static int infection(ArrayList<Edge>[] graph,int src,int k){
       Queue<BPair> qu = new LinkedList<>();
       qu.add(new BPair(src,1));
       int count=0;
       boolean[] vis = new boolean[graph.length];
       
       while(qu.size()>0){
           BPair rem = qu.remove();
           
           if(vis[rem.vtx]==true){
               continue;
           }
           
           vis[rem.vtx]= true;
           if(rem.level>k){
               break;
           }
           
           count++;
           
           for(Edge e:graph[rem.vtx]){
               if(vis[e.nbr]==false){
                   qu.add(new BPair(e.nbr,rem.level+1));
               }
           }
       }
       
       return count;
   }

   public static void main(String[] args) throws Exception {
      BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

      int vtces = Integer.parseInt(br.readLine());
      ArrayList<Edge>[] graph = new ArrayList[vtces];
      for (int i = 0; i < vtces; i++) {
         graph[i] = new ArrayList<>();
      }

      int edges = Integer.parseInt(br.readLine());
      for (int i = 0; i < edges; i++) {
         String[] parts = br.readLine().split(" ");
         int v1 = Integer.parseInt(parts[0]);
         int v2 = Integer.parseInt(parts[1]);
         graph[v1].add(new Edge(v1, v2));
         graph[v2].add(new Edge(v2, v1));
      }

      int src = Integer.parseInt(br.readLine());
      int t = Integer.parseInt(br.readLine());
      
      // write your code here
      
      int ans = infection(graph,src,t);
      System.out.println(ans);
   }

}
