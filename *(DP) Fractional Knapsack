import java.io.*;
import java.util.*;

public class Main {
    
    public static class FPair implements Comparable<FPair>{
        
        int val;
        int wt;
        double frac;
        
        public FPair(int val,int wt){
            this.val = val;
            this.wt = wt;
            this. frac = val *1.0/wt;
        }
        
        public int compareTo(FPair o){
            if(this.frac > o.frac){
                return 1;
            }
            
            else if(this.frac < o.frac){
                return -1;
            }
            
            else
                return 0;
        }
    }
    
    public static void knapsack(int[] wts,int[] vals,int cap){
        PriorityQueue<FPair> pq = new PriorityQueue<>(Collections.reverseOrder());
        
        for(int i=0;i<wts.length;i++){
            pq.add(new FPair(vals[i],wts[i]));
        }
        
        double profit = 0;
        
        while(pq.size()>0 && cap >0){
            FPair rem = pq.remove();
            
            if(rem.wt<=cap){
                profit+=rem.val;
                cap-=rem.wt;
            }
            else{
                profit+=rem.frac*cap;
                cap=0;
            }
        }
        
        System.out.println(profit);
    }

    public static void main(String[] args) throws Exception {
        
        Scanner sc = new Scanner(System.in);
        int n = sc.nextInt();
        int[] vals = new int[n];
        int[] wts = new int[n];
        for(int i=0;i<n;i++){
            vals[i] = sc.nextInt();
        }
        
        for(int i=0;i<n;i++){
            wts[i] = sc.nextInt();
        }
        
        int cap = sc.nextInt();
        
        knapsack(wts,vals,cap);


    }
}
