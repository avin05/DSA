class Solution {
    
    public static int[] nearestLeft(int hist[], int n){
        
        int res[] = new int[n];
        
        Stack<Integer> st = new Stack<Integer>();
        
        for(int i=0;i<n;i++){
            
            if(st.isEmpty()){
                st.push(i);
                res[i]=-1;
            }
            
            else if(hist[st.peek()] < hist[i]){
                
                res[i] = st.peek();
                st.push(i);
            }
            
            else if(hist[st.peek()] >= hist[i]){
                
                st.pop();
                i--;
            }
            
        }
        
        return res;
    }
    
    public static int[] nearestRight(int hist[], int n){
        
        int res[] = new int[n];
        Stack<Integer> st = new Stack<>();
        
        for(int i=n-1;i>=0;i--){
            
            if(st.isEmpty()){
                st.push(i);
                res[i]=n;
            }
            
            else if(hist[st.peek()] < hist[i]){
               res[i]=st.peek();
               st.push(i);
                
            }
               
            else if(hist[st.peek()] >= hist[i]){
                
                
                st.pop();
                i++;
                
            }
            
          
            
         
            
            
        }
        return res;
    }
    
public static int getMaxArea(int hist[], int n)  {
        
        
        int left[] = new int[n];
        int right[] = new int[n];
        
        left = nearestLeft(hist,n);
        right = nearestRight(hist, n);
     
        int max = -1;
        
        int ans[] = new int[n];
        
        for(int i=0;i<n;i++){
            ans[i] = (right[i] - left[i])-1;
            ans[i]= ans[i]*hist[i];
            
            if(ans[i] > max){
                max=ans[i];
            }
        }
         
         return max;
    }
    public int maximalRectangle(char[][] matrix) {
        if(matrix.length == 0 || matrix[0].length == 0)
                return 0;
        
        int res =0;
        int[] arr = new int[matrix[0].length];
        
        for(int i =0;i<matrix.length;i++){
            for(int j=0;j<matrix[0].length;j++){
                if(matrix[i][j] == '0'){
                    arr[j] = 0;
                    
                }else{
                    arr[j]+=matrix[i][j]-'0';
                }
            }
            res = Math.max(res,getMaxArea(arr,arr.length));
        }
        
        return res;
    }
}
